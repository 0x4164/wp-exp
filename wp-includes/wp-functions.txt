function mysql2date( $format, $date, $translate = true ) {
function current_time( $type, $gmt = 0 ) {
function date_i18n( $dateformatstring, $unixtimestamp = false, $gmt = false ) {
function wp_maybe_decline_date( $date ) {
function number_format_i18n( $number, $decimals = 0 ) {
function size_format( $bytes, $decimals = 0 ) {
function get_weekstartend( $mysqlstring, $start_of_week = '' ) {
function maybe_unserialize( $original ) {
function is_serialized( $data, $strict = true ) {
function is_serialized_string( $data ) {
function maybe_serialize( $data ) {
function xmlrpc_getposttitle( $content ) {
function xmlrpc_getpostcategory( $content ) {
function xmlrpc_removepostdata( $content ) {
function wp_extract_urls( $content ) {
function do_enclose( $content, $post_ID ) {
function wp_get_http_headers( $url, $deprecated = false ) {
function is_new_day() {
 * This is a convenient function for easily building url queries. It sets the
function build_query( $data ) {
function _http_build_query( $data, $prefix = null, $sep = null, $key = '', $urlencode = true ) {
function add_query_arg() {
function remove_query_arg( $key, $query = false ) {
function wp_removable_query_args() {
function add_magic_quotes( $array ) {
function wp_remote_fopen( $uri ) {
function wp( $query_vars = '' ) {
function get_status_header_desc( $code ) {
function status_header( $code, $description = '' ) {
function wp_get_nocache_headers() {
function nocache_headers() {
function cache_javascript_headers() {
function get_num_queries() {
function bool_from_yn( $yn ) {
 * If the feed action does not have a hook, then the function will die with a
function do_feed() {
function do_feed_rdf() {
function do_feed_rss() {
function do_feed_rss2( $for_comments ) {
function do_feed_atom( $for_comments ) {
function do_robots() {
function is_blog_installed() {
function wp_nonce_url( $actionurl, $action = -1, $name = '_wpnonce' ) {
 * call the function without any parameters, because validation of the nonce
function wp_nonce_field( $action = -1, $name = "_wpnonce", $referer = true , $echo = true ) {
function wp_referer_field( $echo = true ) {
function wp_original_referer_field( $echo = true, $jump_back_to = 'current' ) {
function wp_get_referer() {
function wp_get_raw_referer() {
function wp_get_original_referer() {
function wp_mkdir_p( $target ) {
function path_is_absolute( $path ) {
function path_join( $base, $path ) {
function wp_normalize_path( $path ) {
 * In the event that this function does not find a writable location,
function get_temp_dir() {
 * This function is used to work around certain ACL issues in PHP primarily
function wp_is_writable( $path ) {
function win_is_writable( $path ) {
function wp_get_upload_dir() {
function wp_upload_dir( $time = null, $create_dir = true, $refresh_cache = false ) {
function _wp_upload_dir( $time = null ) {
function wp_unique_filename( $dir, $filename, $unique_filename_callback = null ) {
			 * @param callable|null $unique_filename_callback Callback function that generates the unique file name.
 * This function will not move an uploaded file to the upload folder. It will
function wp_upload_bits( $name, $deprecated, $bits, $time = null ) {
function wp_ext2type( $ext ) {
function wp_check_filetype( $filename, $mimes = null ) {
 * Currently this function only supports renaming images validated via wp_get_image_mime().
function wp_check_filetype_and_ext( $file, $filename, $mimes = null ) {
function wp_get_image_mime( $file ) {
	 * getimagesize() if exif isn't avaialbe. If either function throws an Exception
function wp_get_mime_types() {
function wp_get_ext_types() {
function get_allowed_mime_types( $user = null ) {
function wp_nonce_ays( $action ) {
 * This function complements the `die()` PHP function. The difference is that
 * to call this function very often, and try to handle as many errors as possible
function wp_die( $message = '', $title = '', $args = array() ) {
		 * @param callable $function Callback function name.
		$function = apply_filters( 'wp_die_ajax_handler', '_ajax_wp_die_handler' );
		 * @param callable $function Callback function name.
		$function = apply_filters( 'wp_die_xmlrpc_handler', '_xmlrpc_wp_die_handler' );
		 * @param callable $function Callback function name.
		$function = apply_filters( 'wp_die_handler', '_default_wp_die_handler' );
function _default_wp_die_handler( $message, $title = '', $args = array() ) {
function _xmlrpc_wp_die_handler( $message, $title = '', $args = array() ) {
function _ajax_wp_die_handler( $message, $title = '', $args = array() ) {
function _scalar_wp_die_handler( $message = '' ) {
function wp_json_encode( $data, $options = 0, $depth = 512 ) {
function _wp_json_sanity_check( $data, $depth ) {
function _wp_json_convert_string( $string ) {
function _wp_json_prepare_data( $data ) {
function wp_send_json( $response, $status_code = null ) {
function wp_send_json_success( $data = null, $status_code = null ) {
function wp_send_json_error( $data = null, $status_code = null ) {
 * function names. This helps to mitigate XSS attacks caused by directly
function wp_check_jsonp_callback( $callback ) {
function _config_wp_home( $url = '' ) {
function _config_wp_siteurl( $url = '' ) {
function _delete_option_fresh_site() {
function _mce_set_direction( $mce_init ) {
 * time the function is called.
 * The full list of smilies can be found in the function and won't be listed in
function smilies_init() {
 * This function is used throughout WordPress to allow for both string or array
function wp_parse_args( $args, $defaults = '' ) {
function wp_parse_id_list( $list ) {
function wp_parse_slug_list( $list ) {
function wp_array_slice_assoc( $array, $keys ) {
function wp_is_numeric_array( $data ) {
function wp_filter_object_list( $list, $args = array(), $operator = 'and', $field = false ) {
function wp_list_filter( $list, $args = array(), $operator = 'AND' ) {
function wp_list_pluck( $list, $field, $index_key = null ) {
function wp_list_sort( $list, $orderby = array(), $order = 'ASC', $preserve_keys = false ) {
function wp_maybe_load_widgets() {
function wp_widgets_add_menu() {
function wp_ob_end_flush_all() {
 * This function was backported to WordPress 2.3.2, but originally was added
function dead_db() {
function absint( $maybeint ) {
 * Mark a function as deprecated and inform when it has been used.
 * to get the backtrace up to what file and function called the deprecated
 * This function is to be used in every function that is deprecated.
 * @param string $function    The function that was called.
 * @param string $replacement Optional. The function that should have been called. Default null.
function _deprecated_function( $function, $version, $replacement = null ) {
	 * Fires when a deprecated function is called.
	 * @param string $function    The function that was called.
	 * @param string $replacement The function that should have been called.
				/* translators: 1: PHP function name, 2: version number, 3: alternative function name */
				/* translators: 1: PHP function name, 2: version number */
 * This function is to be used in every PHP4 style constructor method that is deprecated.
function _deprecated_constructor( $class, $version, $parent_class = '' ) {
 * to get the backtrace up to what file and function included the deprecated
 * This function is to be used in every file that is deprecated.
function _deprecated_file( $file, $version, $replacement = null, $message = '' ) {
 * Mark a function argument as deprecated and inform when it has been used.
 * This function is to be used whenever a deprecated function argument is used.
 * Before this function is called, the argument must be checked for whether it was
 * to get the backtrace up to what file and function used the deprecated
 * @param string $function The function that was called.
function _deprecated_argument( $function, $version, $message = null ) {
	 * @param string $function The function that was called.
				/* translators: 1: PHP function name, 2: version number, 3: optional message regarding the change */
				/* translators: 1: PHP function name, 2: version number */
 * This function is called by the do_action_deprecated() and apply_filters_deprecated()
function _deprecated_hook( $hook, $version, $replacement = null, $message = null ) {
 * to get the backtrace up to what file and function called the deprecated
 * @param string $function The function that was called.
function _doing_it_wrong( $function, $message, $version ) {
	 * Fires when the given function is being used incorrectly.
	 * @param string $function The function that was called.
			/* translators: Developer debugging message. 1: PHP function name, 2: Explanatory message, 3: Version information message */
function is_lighttpd_before_150() {
function apache_mod_loaded($mod, $default = false) {
function iis7_supports_permalinks() {
function validate_file( $file, $allowed_files = array() ) {
function force_ssl_admin( $force = null ) {
function wp_guess_url() {
 * function again if you wish to re-enable cache adds earlier.
function wp_suspend_cache_addition( $suspend = null ) {
function wp_suspend_cache_invalidation( $suspend = true ) {
function is_main_site( $site_id = null, $network_id = null ) {
function get_main_site_id( $network_id = null ) {
function is_main_network( $network_id = null ) {
function get_main_network_id() {
function global_terms_enabled() {
function wp_timezone_override_offset() {
function _wp_timezone_choice_usort_callback( $a, $b ) {
function wp_timezone_choice( $selected_zone, $locale = null ) {
function _cleanup_header_comment( $str ) {
function wp_scheduled_delete() {
function get_file_data( $file, $default_headers, $context = '' ) {
function __return_true() {
function __return_false() {
function __return_zero() {
function __return_empty_array() {
function __return_null() {
function __return_empty_string() {
function send_nosniff_header() {
function _wp_mysql_week( $column ) {
 * Find hierarchy loops using a callback function that maps object IDs to parent IDs.
function wp_find_hierarchy_loop( $callback, $start, $start_parent, $callback_args = array() ) {
function wp_find_hierarchy_loop_tortoise_hare( $callback, $start, $override = array(), $callback_args = array(), $_return_loop = false ) {
function send_frame_options_header() {
function wp_allowed_protocols() {
 * @param string $ignore_class Optional. A class to ignore all function calls within - useful
function wp_debug_backtrace_summary( $ignore_class = null, $skip_frames = 0, $pretty = true ) {
function _get_non_cached_ids( $object_ids, $cache_key ) {
function _device_can_upload() {
function wp_is_stream( $path ) {
function wp_checkdate( $month, $day, $year, $source_date ) {
function wp_auth_check_load() {
function wp_auth_check_html() {
function wp_auth_check( $response ) {
function get_tag_regex( $tag ) {
function _canonical_charset( $charset ) {
 * This function overrides the mbstring encoding to a binary-safe encoding, and
function mbstring_binary_safe_encoding( $reset = false ) {
function reset_mbstring_encoding() {
function wp_validate_boolean( $var ) {
function wp_delete_file( $file ) {
function wp_delete_file_from_directory( $file, $directory ) {
function wp_post_preview_js() {
function mysql_to_rfc3339( $date_string ) {
 * @param string $context Optional. Context in which the function is called. Accepts either 'admin',
function wp_raise_memory_limit( $context = 'admin' ) {
function wp_generate_uuid4() {
function wp_is_uuid( $uuid, $version = null ) {
function wp_cache_get_last_changed( $group ) {
function wp_site_admin_email_change_notification( $old_email, $new_email, $option_name ) {
function wp_privacy_anonymize_ip( $ip_addr, $ipv6_fallback = false ) {
function wp_privacy_anonymize_data( $type, $data = '' ) {
function wp_privacy_exports_dir() {
function wp_privacy_exports_url() {
function wp_schedule_delete_old_privacy_export_files() {
function wp_privacy_delete_old_export_files() {
